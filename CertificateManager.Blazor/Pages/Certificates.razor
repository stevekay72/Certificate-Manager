@page "/certificates"

@using CertificateServices.Models;
@using CertificateServices.Interfaces;
@using CertificateManager.Blazor.Data;
@using System.Text.RegularExpressions;
@using System.Linq;
@inject ICertificateService CertService;
@inject IDNParser DNParser;
@inject DataStoreService DataStore;

<h3>Certificates</h3>

<input placeholder="Add Url" @bind="_newUrl" />
<button @onclick="AddUrl">Add Url</button>

@if (certificates == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th/><th/>
            <th>Expiry</th>
            <th>Issuer</th>
            <th>Subject</th>
            <th>Url</th>
            <th>Valid</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var certificate in certificates)
            {
            <tr>
                <td><a @onclick="@(() => RemoveItem(certificate))"><i class="oi oi-trash"></i></a></td>
                <td><a class="fas fa-circle" style='font-size: 20px;color:@certificate.StatusColour()'></a></td>
                <td>@certificate.Expiry.ToString("dd MMM yyyy")</td>
                <td>@DNParser.Parse(certificate.IssuerDN).O</td>
                <td>@DNParser.Parse(certificate.SubjectDN).O</td>
                <td>@certificate.Url.DnsSafeHost</td>
                <td>@certificate.CertificateValidationResult?.IsValid</td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    private IList<CertificateInfo> certificates = new List<CertificateInfo>();
    private string _newUrl;

    private async Task AddUrl()
    {
        if (!string.IsNullOrWhiteSpace(_newUrl))
        {
            var certDetails = await CertService.GetCertificateInfo(new Uri($"https://{_newUrl}"));
            certDetails.Id = Guid.NewGuid();
            certificates.Add(certDetails);
            DataStore.AddCertificate(certDetails);
            _newUrl = string.Empty;
            SortTable();
        }
    }

    private void RemoveItem(CertificateInfo certificate)
    {
        certificates.Remove(certificate);
        DataStore.RemoveCertificate(certificate);
    }

    private void RemoveItemById(Guid id)
    {
        //certificates.Remove(certificates.First(x => x.Id == id));
    }

    private void SortTable()
    {
        certificates = certificates.OrderBy(x => x.CertificateValidationResult.IsValid).ThenBy(y => y.Expiry).ToList();
    }

    protected override void OnInitialized()
    {
        certificates = DataStore.GetCertificateList().ToList();
        SortTable();
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    certificates = DataStore.GetCertificateList().ToList();
    //}

}
